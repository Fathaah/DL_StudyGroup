{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"IntroTensorflow(Begginers)","version":"0.3.2","provenance":[{"file_id":"18p4UdlX_TixG43zneqUfy8KyY-gaChQz","timestamp":1546615121881}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"WDWVCtFSwQyy","colab_type":"text"},"source":["#\\DEEP LEARNING **\n","---\n","\n",">>><img src= \"https://cdn-images-1.medium.com/max/1200/1*TiORvHgrJPme_lEiX3olVA.png\" width =400 height=400>\n","\n","\n","\n",">>Distinction between Deep Learning , Machine Learning and Artificial Intelligence\n"]},{"cell_type":"markdown","metadata":{"id":"lrEzscaZNrT6","colab_type":"text"},"source":["###<font color=\"red\">How is it different from traditional programming ?</font>  \n","\n","\n","\n",">>## ***Software engineering is the art of automating a task by writing rules for a computer to follow. Machine learning goes a step further: it automates the task of writing the rules.* **\n","\n","\n","[Source](https://www.futurice.com/blog/differences-between-machine-learning-and-software-engineering/)"]},{"cell_type":"markdown","metadata":{"id":"sKnrhdYmgc5B","colab_type":"text"},"source":["[Kepler Telescope Example](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=2&cad=rja&uact=8&ved=2ahUKEwjUiKL4zsrfAhUVU30KHSSMCrUQFjABegQIARAB&url=http%3A%2F%2Fai.googleblog.com%2F2018%2F03%2Fopen-sourcing-hunt-for-exoplanets.html&usg=AOvVaw2RWqCt1b1M7qX7sR0Z2GwZ)\n","\n","[Video Source](https://oembed.vice.com/files/5f041b4d1cfd3591b488c5d2ea857369.mp4)"]},{"cell_type":"markdown","metadata":{"id":"Wwbp3ROYKtgS","colab_type":"text"},"source":[">>>>>>>><font size = 6>Data And Compute Power</font>\n","\n","\n","---\n",">>>>>>>>The main factors that resulted in the boost of AI.\n","----\n",">>>><img src=\"http://www.dlib.org/dlib/may09/mestl/Figure_2-rev.jpg\" >\n"," \n"," >>>>>>>**The influx of data over the years.**\n","  "]},{"cell_type":"markdown","metadata":{"id":"X71uXw7578J6","colab_type":"text"},"source":["\n","\n","---\n","\n"]},{"cell_type":"markdown","metadata":{"id":"aDe3h2Ffjw7b","colab_type":"text"},"source":["## TENSORFLOW\n","It is an open source library for dataflow programming,which is commonly used for machine learning,deep learning,etc.It was developed for Google's internal use and was open sourced later.\n","\n","Tensorflow has two main steps for execution:\n","\n","1. Unlike traditional programming languages tensorflow first creates a computation graph.\n","\n","<img src = \"http://colah.github.io/posts/2015-08-Backprop/img/tree-def.png\" width = 300 height = 300>\n","\n","2.Execution of graph.\n","[Installation](https://www.tensorflow.org/install/)\n","##NumPy\n","NumPy is a library for the Python programming language, adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays. \n","\n","[Installation](https://scipy.org/install.html)\n","\n","## MATPLOTLIB\n","\n","matplotlib is a plotting library for the Python programming language and its numerical mathematics extension NumPy. \n","\n","[Installation](https://matplotlib.org/users/installing.html)"]},{"cell_type":"code","metadata":{"id":"_8kffGF8PKYP","colab_type":"code","colab":{}},"source":["import tensorflow as tf\n","import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yoF8nk2N8po_","colab_type":"text"},"source":["## 1. DATA\n","\n","Below you can find a **50** points in 2-D space.We have X values and Y values denotes as\n","\n","```\n","train_x and train_y\n","```\n","\n","**Our objective is to find an optimal relation between them,here its a line which will give you an approximate value of Y given a X**\n","\n"]},{"cell_type":"code","metadata":{"id":"lkY0xuIOPgtK","colab_type":"code","colab":{}},"source":["N_SAMPLES = 50\n","train_x = np.array([ 0.        ,  0.6122449 ,  1.2244898 ,  1.83673469,  2.44897959,\n","        3.06122449,  3.67346939,  4.28571429,  4.89795918,  5.51020408,\n","        6.12244898,  6.73469388,  7.34693878,  7.95918367,  8.57142857,\n","        9.18367347,  9.79591837, 10.40816327, 11.02040816, 11.63265306,\n","       12.24489796, 12.85714286, 13.46938776, 14.08163265, 14.69387755,\n","       15.30612245, 15.91836735, 16.53061224, 17.14285714, 17.75510204,\n","       18.36734694, 18.97959184, 19.59183673, 20.20408163, 20.81632653,\n","       21.42857143, 22.04081633, 22.65306122, 23.26530612, 23.87755102,\n","       24.48979592, 25.10204082, 25.71428571, 26.32653061, 26.93877551,\n","       27.55102041, 28.16326531, 28.7755102 , 29.3877551 , 30.        ])\n","train_y = np.array([ 1.12148316, -0.76567707,  8.58652473,  1.21835246,  8.01947288,\n","        0.20631416, 12.11384329, 11.37282044,  7.53302367, 15.10530989,\n","        2.41273505,  8.36827182, 14.93441419, 15.39062231, 13.58667721,\n","       16.83281836, 20.63714334, 22.67414576, 28.27466711, 25.50191198,\n","       33.66774616, 19.41356269, 16.05451971, 27.48588318, 29.45399936,\n","       33.04711392, 35.45406778, 32.96374729, 36.76772867, 37.77780676,\n","       26.98268375, 32.90813417, 36.90907056, 39.84733857, 47.85588188,\n","       42.6941887 , 40.93559265, 44.76683172, 49.30166157, 45.27102284,\n","       50.77592922, 47.46742308, 50.39894904, 53.73019944, 52.3869633 ,\n","       52.81273103, 60.0022087 , 60.09175506, 58.3286074 , 63.17807645])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4Y4709Cb-HaT","colab_type":"text"},"source":["**Its very important to have a good understanding of the data your working with**"]},{"cell_type":"code","metadata":{"id":"HsGlui46UA4f","colab_type":"code","outputId":"ecf50259-9483-452d-db7a-60d145cf97e0","executionInfo":{"status":"ok","timestamp":1552055407851,"user_tz":-330,"elapsed":5160,"user":{"displayName":"Abdul Fathaah","photoUrl":"","userId":"12230057176593259077"}},"colab":{"base_uri":"https://localhost:8080/"}},"source":["plt.plot(train_x, train_y, 'ro') #ro indicated red circles \n","plt.show"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show>"]},"metadata":{"tags":[]},"execution_count":5},{"output_type":"display_data","data":{"image/png":"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\n0Wh8zpgABgBMmFH4dnd3a8mSJZKkG2+8UefOndO3335racOSGWts0vCBNo1X10gej8arazR8oM3S\nucpL7xGbwT3cNGcMAJiZGa12Hhoa0s033xz/+dprr1UoFNLcuXMta9hUxhqbNNbYJL+/ROHQ+aze\nYyaYMwYApGPJq0axWCzl5z6fVx5PoRW3SuD3l1x58fBhads26eRJqbpa2rJFam62/N5Tqq6Wjh+/\n4nJBdXXy9lokm9/tRNQjEfWYRC0SUY9Epuoxo/AtLy/X0NBQ/OevvvpKfr9/yv8+HI7M5DYp+f0l\nCl3W8738HV0dPy498ICGh0eMvUZTvPaJxDZcNPw/rRrLUk89WS3cjHokoh6TqEUi6pHI6nqkCvIZ\nzfneeeed6uzslCT19vaqvLzcyJBzOnaYb53tnDEAIP/NqOd722236eabb1Zzc7MKCgr03HPPWd2u\nGbHLfOts5owBAPlvxnO+GzdutLIdlohWVsnT15v0OgAAduGoHa7S4bAAAIAT5FX4Mt8KAHACR51q\nlAnmWwEAdpdXPV8AAJyA8AUAwDDCFwAAwwhfAAAMI3wBADCM8AUAwDDCFwAAwwhfAAAMI3wBADCs\nIBaLxXLdCAAA3ISeLwAAhhG+AAAYRvgCAGAY4QsAgGGELwAAhhG+AAAY5sl1A6Zr27Zt+te//qWC\nggJt2bJFt956a66blDM9PT1qaWnRTTfdJEmqrKzUM888k+NWmdff36/HH39cv/3tb/Xggw9qYGBA\nmzZtUjQald/v186dO1VUVJTrZhpzeT02b96s3t5eXXPNNZKkRx55RHfffXduG2nIjh079PHHH2t8\nfFxr1qzRLbfc4upn4/J6/P3vf3flszEyMqLNmzfr7NmzGhsb0+OPP66qqiqjz4ajwvfDDz/U559/\nrvb2dn322WfasmWL2tvbc92snLrjjju0b9++XDcjZyKRiLZu3ara2tr4tX379ikQCGjp0qXavXu3\ngsGgAoFADltpTrJ6SNL69etVX1+fo1blxgcffKBPPvlE7e3tCofDamxsVG1trWufjWT1+MUvfuHK\nZ+Pdd99VTU2NVq9erTNnzmjVqlW67bbbjD4bjhp27u7u1pIlSyRJN954o86dO6dvv/02x61CLhUV\nFen1119XeXl5/FpPT48aGhokSfX19eru7s5V84xLVg+3uv3227V3715JUmlpqUZGRlz9bCSrRzQa\nzXGrcmPZsmVavXq1JGlgYEAVFRXGnw1Hhe/Q0JB8Pl/852uvvVahUCiHLcq9Tz/9VI899pgeeOAB\n/eMf/8h1c4zzeDyaM2dOwrWRkZH4cFFZWZmrnpFk9ZCkt956SytXrtQTTzyhr7/+OgctM6+wsFBe\nr1eSFAwGddddd7n62UhWj8LCQlc+GxOam5u1ceNGbdmyxfiz4ahh58u5fWfMG264QWvXrtXSpUt1\n+vRprVy5Ul1dXa6aw0rH7c+IJC1fvlzXXHONFi5cqNdee02vvPKKnn322Vw3y5i3335bwWBQbW1t\nuvfee+PX3fpsXFqPEydOuPrZOHz4sPr6+vTkk08mPA8mng1H9XzLy8s1NDQU//mrr76S3+/PYYty\nq6KiQsuWLVNBQYGuv/56zZs3T4ODg7luVs55vV6Njo5KkgYHB10/BFtbW6uFCxdKku655x719/fn\nuEXmvPfee9q/f79ef/11lZSUuP7ZuLwebn02Tpw4oYGBAUnSwoULFY1GdfXVVxt9NhwVvnfeeac6\nOzslSb29vSovL9fcuXNz3KrcOXr0qP7yl79IkkKhkM6ePauKiooctyr3Fi1aFH9Ourq6VFdXl+MW\n5da6det0+vRpSRfmwydWx+e78+fPa8eOHTpw4EB8Na+bn41k9XDrs/HRRx+pra1N0oXpzEgkYvzZ\ncNypRi+99JI++ugjFRQU6LnnnlNVVVWum5Qz3377rTZu3Kjh4WF9//33Wrt2rRYvXpzrZhl14sQJ\nvfjiizpz5ow8Ho8qKir00ksvafPmzRobG9P8+fO1fft2/eAHP8h1U41IVo8HH3xQr732mq666ip5\nvV5t375dZWVluW5q1rW3t+vll1/WT37yk/i1F154QU8//bQrn41k9bjvvvv01ltvue7ZGB0d1R//\n+EcNDAxodHRUa9euVU1NjZ566iljz4bjwhcAAKdz1LAzAAD5gPAFAMAwwhcAAMMIXwAADCN8AQAw\njPAFAMAwwhcAAMMIXwAADPs/C9OqXp8B3FcAAAAASUVORK5CYII=\n","text/plain":["<Figure size 576x396 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"ELb2hrJZ_Pog","colab_type":"text"},"source":["\n"]},{"cell_type":"markdown","metadata":{"id":"-a5oBFeqTFSC","colab_type":"text"},"source":["## 2.Model\n","\n","Defining model is something like defining a function which can represent your data well,it also is the part where you define your inputs and outputs.\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"EFDct1QEbtVT","colab_type":"text"},"source":["\n","\n","---\n","\n","\n","A placeholder is node in tensorflow with which we can feed in data . It allows us to create our operations and build our computation graph. In TensorFlow terminology, we then feed data into the graph through these placeholders.\n","\n",">>>>><font color=\"red\">\n","\n","                                         tf.placeholder(DataType, shape)\n","</font>\n","\n","\n","[Source](https://www.tensorflow.org/api_docs/python/tf/placeholder)"]},{"cell_type":"code","metadata":{"id":"K9dWFZCsV76M","colab_type":"code","colab":{}},"source":["#Data\n","X = tf.placeholder(tf.float32)\n","Y = tf.placeholder(tf.float32)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Bh2DxP3ggfyl","colab_type":"text"},"source":["A variable in tensorflow can change overtime  compared to a placeholder during the execution of the graph\n",">>>>><font color=\"red\">\n","\n","                                         tf.Variable(<initial-value>, name=<optional-name>)\n","\n","</font>\n","  [Source](https://www.tensorflow.org/api_docs/python/tf/Variable)"]},{"cell_type":"code","metadata":{"id":"WhHVZbYoVFs2","colab_type":"code","colab":{}},"source":["#Trainable Parameters\n","W = tf.Variable(np.random.randn())\n","B = tf.Variable(np.random.randn())"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hft0ALeZmoxn","colab_type":"text"},"source":["The model is defined as :\n",">>>>><font size = 4>$ŷ $</font> $= W*X + B$\n","\n","Where $W,B$ are weights and biase/offset and $X$ is the input ."]},{"cell_type":"code","metadata":{"id":"dZmHyb_fYzQ7","colab_type":"code","colab":{}},"source":["#Defining the line (Here we are using a linear function)\n","y_pred = W * X +B"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"810xGQhog2u7","colab_type":"text"},"source":["## 3. LOSS FUNCTION\n","it’s a method of evaluating how well your algorithm models your dataset. If your predictions are totally off, your loss function will output a higher number. If they’re pretty good, it’ll output a lower number. As you change pieces of your algorithm to try and improve your model, your loss function will tell you if you’re getting anywhere.\n","\n","\n","![alt text](https://blog.algorithmia.com/wp-content/uploads/2018/04/word-image-5.png)\n","\n","\n","[Source](https://blog.algorithmia.com/introduction-to-loss-functions/)"]},{"cell_type":"markdown","metadata":{"id":"nuvIvi5Lh2Yt","colab_type":"text"},"source":["### MEAN SQUARED ERROR\n","To calculate MSE, you take the difference between your predictions and the ground truth, square it, and average it out across the whole dataset.\n","\n",">>>>>>>>>$M.S.E$ = <font size = 5>$\\frac{(ŷ-y)^2}{N}$ </font>\n","\n","Where $ŷ  $ is the predicted value and $y$ is the real value."]},{"cell_type":"code","metadata":{"id":"JxkkZj3gY6m4","colab_type":"code","colab":{}},"source":["#loss\n","loss = (y_pred-Y)**2/(N_SAMPLES)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WIioQCOlj4hC","colab_type":"text"},"source":["##4.Optimizer\n","They tie together the loss function and model parameters by **updating the model in response to the output of the loss function**. In simpler terms, optimizers shape and mold your model into its most accurate possible form by futzing with the weights. The loss function is the guide to the terrain, telling the optimizer when it’s moving in the right or wrong direction.\n","\n","\n","[Source](https://blog.algorithmia.com/introduction-to-optimizers/)"]},{"cell_type":"markdown","metadata":{"id":"Flyyo98hlrnV","colab_type":"text"},"source":["### GRADIENT DESCENT\n","\n","Gradient Descent is done in 3 steps:\n","\n"," * Calculate what a small change in each individual weight would do to the loss function (i.e. which direction should the hiker walk in)\n","    \n","* Adjust each individual weight based on its gradient (i.e. take a small step in the determined direction)\n","* Keep doing steps #1 and #2 until the loss function gets as low as possible\n","\n","\n","![alt text](https://nikcheerla.github.io/deeplearningschool//media/loss2d.gif)"]},{"cell_type":"markdown","metadata":{"id":"D21ZWsYfnR0A","colab_type":"text"},"source":["###LEARNING RATE\n","\n","<img src=\"https://blog.algorithmia.com/wp-content/uploads/2018/05/word-image-2.png\" width = 500 height =300>\n","\n","\n","\n","\n","\n","$W = W — LearningRate*Gradient $\n","\n","\n","[To learn more](https://towardsdatascience.com/understanding-learning-rates-and-how-it-improves-performance-in-deep-learning-d0d4059c1c10)"]},{"cell_type":"code","metadata":{"id":"_gy9eQCOZFMF","colab_type":"code","colab":{}},"source":["optimizer = tf.train.GradientDescentOptimizer(0.01).minimize(loss)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MXUqQAr81mbF","colab_type":"text"},"source":["## Putting All Togather\n","\n","\n","\n","---\n","We first need to start an environment for executing our graph, in tensorflow tems **Session**.We do this by opening\n","\n","\n","\n","```\n","with tf.Session() as sess:\n","```\n","where `sess` is the variable used to denote our executing environment.\n","To run anything in the graph we can use \n","\n","\n","\n","```\n","sess.run(<SomeThingToRun>,feed_dict={All the data required to run that element})\n","```\n","\n","\n","\n","Then we  initialize values to the variables we have assigned in the graph,we do that using\n","\n","\n","```\n","sess.run(tf.global_variables_initializer())\n","```\n","Now lets satrt the process called training the model.We need to go through our data and adjust the slope and offset such that we can have a minimum error.\n","For this we will go 20 times through our data and adjust  the slopes that many times.\n","We use a for loop for this.\n","\n","\n","```\n","for i in range(20):\n","  #Code\n","  #Code\n","  #Code\n","#Code Outside Loop\n","\n","```\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"WmR-0hjK9qP9","colab_type":"text"},"source":["In our case we need a nested loop:\n","1 . To pass through our data (50 data points).\n","2.  To pass through our entire data 20 times.\n","\n","\n","\n","```\n","  for i in range(20):\n","    for j in range(N_SAMPLES):\n","      \n","```\n","\n","Now the last step Executing our graph by feeding in our data.\n","we do that by calling our optimizer which first does a forward pass then doing a backward pass to tweak our weights in the diection of decreasing loss.\n","\n","Our optimizer needs two things:\n","\n","1. Our X point.\n","2. Our Y point.\n","\n","\n","\n","```\n","o=(sess.run(optimizer,feed_dict={X:train_x[j],Y:train_y[j]}))\n","```\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"JNfIdGnsWiES","colab_type":"code","colab":{}},"source":["w=[]\n","b=[]\n","with tf.Session() as sess:\n","  \n","  sess.run(tf.global_variables_initializer())\n","  for i in range(20):\n","    for j in range(N_SAMPLES):\n","      o=(sess.run(optimizer,feed_dict={X:train_x[j],Y:train_y[j]}))\n","      w.append(sess.run(W))\n","      b.append(sess.run(B))   "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"m9Wtj0N7he9w","colab_type":"code","outputId":"62233c5e-af1a-4ee7-afcd-15a39f954ecb","executionInfo":{"status":"ok","timestamp":1546359523402,"user_tz":-330,"elapsed":2075,"user":{"displayName":"Abdul Fathaah","photoUrl":"","userId":"12230057176593259077"}},"colab":{"base_uri":"https://localhost:8080/","height":347}},"source":["plt.plot(train_x, train_y, 'ro', label='Original data')\n","plt.plot(train_x, w[-1] * train_x + b[-1], label='Fitted line')\n","plt.legend()\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nAElFTkSuQmCC\n","text/plain":["<matplotlib.figure.Figure at 0x7fd8fe9bbd68>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"sDf9U_e7iC2c","colab_type":"text"},"source":["#5.Evaluation Of Your Model\n","\n","\n","*   [Test Data](https://medium.com/datadriveninvestor/data-science-essentials-why-train-validation-test-data-b7f7d472dc1f)\n","*   [Train Data](https://medium.com/datadriveninvestor/data-science-essentials-why-train-validation-test-data-b7f7d472dc1f)\n","*    [Overfitting/Underfirtting](https://medium.com/greyatom/what-is-underfitting-and-overfitting-in-machine-learning-and-how-to-deal-with-it-6803a989c76)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"2rv8CZYQjTk0","colab_type":"text"},"source":["#[Further Study](https://developers.google.com/machine-learning/crash-course/)\n"]}]}